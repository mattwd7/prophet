:javascript
  var image_w, image_h, original_w, original_h, JcropAPI

  $(document).ready(function(){
      $('#cropbox').hover(function(){
          initJcrop();
          JcropAPI = $("#cropbox").data('Jcrop');
      })

      function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    if (input.files[0].size / 1024 < 8){
                        alert('Image file size must be greater than 8KB.')
                    } else if ( !$('input#user_avatar')[0].files[0].name.match(/^.*\.(jpg|JPG|gif|GIF|png|PNG|jpeg|JPEG)$/) ) {
                        alert('File must be an image file (jpg, png, gif).')
                    } else {
                        if (typeof JcropAPI !== 'undefined'){
                          JcropAPI.destroy();
                          $('.cropping').append("<div id='cropbox'><img src='" + e.target.result + "'></div>")
                        } else {
                        $('#cropbox').find('img').attr('src', e.target.result);
                        }
                        initJcrop();
                        $('#preview-container').find('img').attr('src', e.target.result);
                    }
                };

                reader.readAsDataURL(input.files[0]);
            }
        }

        $('input#user_avatar').change(function(){
            readURL($(this)[0]);
        });

  });

  function initJcrop(){
        image_w = $('#cropbox').find('img').width();
        image_h = $('#cropbox').find('img').height();
        $('#cropbox').Jcrop({
            onChange: update_crop,
            onSelect: update_crop,
            aspectRatio: 1
        });
  }

  function update_crop(coords) {
      var rx = (image_w * 100) / (#{@user.avatar_geometry(:original).width} * coords.w );
      var ry = (image_h * 100) / (#{@user.avatar_geometry(:original).height} * coords.h );
      $('#current').hide();
      $('#preview').show();
      $('#preview').css({
          width: Math.round(rx * #{@user.avatar_geometry(:original).width}) + 'px',
          height: Math.round(ry * #{@user.avatar_geometry(:original).height}) + 'px',
          marginLeft: '-' + Math.round(coords.x * rx * #{@user.avatar_geometry(:original).width} / image_w) + 'px',
          marginTop: '-' + Math.round(coords.y * ry * #{@user.avatar_geometry(:original).height} / image_h) + 'px'
      });

      var ratio_w = "#{@user.avatar_geometry(:original).width}" / image_w;
      var ratio_h = "#{@user.avatar_geometry(:original).height}" / image_h;
      $("#crop_x").val(Math.round(coords.x * ratio_w));
      $("#crop_y").val(Math.round(coords.y * ratio_h));
      $("#crop_w").val(Math.round(coords.w * ratio_w));
      $("#crop_h").val(Math.round(coords.h * ratio_h));
  }

.devise
  %p.errors= flash[:error]
  %p.notices= flash[:notice]

.column#left

  %ul#settings-menu
    %li.selected.general
      General
      .chevron
    %li.notifications
      Notifications
      .chevron

  .copyright
    Copyright 2016 Prophet
    %ul.links
      %li= link_to 'About', about_path
      %li= link_to 'Help', help_path
      %li= link_to 'Terms', terms_path
      %li= link_to 'Privacy', privacy_path


.column#middle
  = render partial: 'general_settings'
  = render partial: 'notifications'

.column#right
  = render partial: 'users/profile'